dy.load()
dyn.load()
dyn.load('/Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(h2o)
h2o.init()
install.packages('rJava')
library(plotmatrix)
utils::remove.packages('plotmatrix')
library(plotmatrix)
library(plotmatrix)
devtools::install_github('adhok/plotmatrix')
browseVignettes(plotmatrix)
browseVignettes('plotmatrix')
getwd()
browseVignettes(plotmatrix)
browseVignettes(ggplot2)
browseVignettes('ggplot2')
utils::remove.packages('plotmatrix')
devtools::install_github('adhok/plotmatrix')
browseVignettes('plotmatrix')
browseVignettes('plotmatrix')
library(tidytext)
install.packages('padr')
em_sel <- padr::emergency %>% dplyr::filter()
em_sel <- padr::emergency %>% dplyr::filter(
title %in% c("Traffic: VEHICLE ACCIDENT -", "Traffic: DISABLED VEHICLE -", "Fire: FIRE ALARM"),
twp   %in% c("LOWER MERION", "ABINGTON", "NORRISTOWN", "UPPER MERION")) %>%
mutate(twp = factor(twp,
levels = c("LOWER MERION", "ABINGTON", "NORRISTOWN", "UPPER MERION"),
labels = c("Low Mer.", "Abing.", "Norris.", "Upper Mer.")))
library(padr)
library(tidyverse)
em_sel <- padr::emergency %>% dplyr::filter(
title %in% c("Traffic: VEHICLE ACCIDENT -", "Traffic: DISABLED VEHICLE -", "Fire: FIRE ALARM"),
twp   %in% c("LOWER MERION", "ABINGTON", "NORRISTOWN", "UPPER MERION")) %>%
mutate(twp = factor(twp,
levels = c("LOWER MERION", "ABINGTON", "NORRISTOWN", "UPPER MERION"),
labels = c("Low Mer.", "Abing.", "Norris.", "Upper Mer.")))
install.packages("lubridate")
shiny::runApp('Documents/R/Data-Summariser')
iria
iris
library(tidyverse)
library(ggplot2)
iris %>% group_by(Species) %>% summarise(n=n()) %>% mutate(n= n/sum(n))%>% ggplot(aes(x=Species,y=n))+geom_bar(stat='identity')
iris %>% group_by(Species) %>% summarise(n=n()) %>% mutate(n= n/sum(n))%>% ggplot(aes(x=Species,y=n))+geom_bar(stat='identity')+coord_polar()
?coord_polar
doh + geom_bar(width = 0.9, position = "fill") + coord_polar(theta = "y")
}
df <- data.frame(
variable = c("does not resemble", "resembles"),
value = c(20, 80)
)
ggplot(df, aes(x = "", y = value, fill = variable)) +
geom_col(width = 1) +
scale_fill_manual(values = c("red", "yellow")) +
coord_polar("y", start = pi / 3) +
labs(title = "Pac man")
iris %>% group_by(Species) %>% summarise(n=n()) %>% mutate(n= n/sum(n))%>% ggplot(aes(x=Species,y=n))+geom_bar(stat='identity')+coord_polar('y')
iris %>% group_by(Species) %>% summarise(n=n()) %>% mutate(n= n/sum(n))%>% ggplot(aes(x=Species,y=n))+geom_bar(stat='identity')+coord_polar('y',start=pi/3)
iris %>% group_by(Species) %>% summarise(n=n()) %>% mutate(n= n/sum(n))%>% ggplot(aes(x=Species,y=n,fill=Species))+geom_bar(stat='identity')+coord_polar('y',start=pi/3)
dat <- iris %>% group_by(Species) %>% summarise(n=n()) %>% mutate(n=n/sum(n))
dat
dat <- iris %>% group_by(Species) %>% summarise(n=n()) %>% mutate(n=n/sum(n))
dat$fraction = dat$n / sum(dat$n)
dat = dat[order(dat$n), ]
dat$ymax = cumsum(dat$n)
dat$ymin = c(0, head(dat$ymax, n=-1))
dat$ymin
p1 = ggplot(dat, aes(fill=Species, ymax=ymax, ymin=ymin, xmax=4, xmin=3)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")
p1
p1 = ggplot(dat, aes(fill=Species, ymax=ymax, ymin=ymin, xmax=4, xmin=3)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+plotTheme()
plotTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 12,colour = "black",hjust=0.5),
plot.subtitle = element_text(face="italic"),
plot.caption = element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.1),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey80", color = "white"),
strip.text = element_text(size=8),
axis.title = element_text(size=5),
axis.text = element_text(size=5),
axis.title.x = element_text(hjust=1,size=10),
axis.title.y = element_text(hjust=1,size=10),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text(colour = "black", face = "bold"),
legend.text = element_text(colour = "black", face = "bold"),
axis.text.x = element_text(vjust=-1,angle=90,size=10))
}
p1 = ggplot(dat, aes(fill=Species, ymax=ymax, ymin=ymin, xmax=4, xmin=3)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+plotTheme()
p1
p1 = ggplot(dat, aes(fill=Species, ymax=ymax, ymin=ymin)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+plotTheme()
p1
ggplot(dat, aes(fill=Species, ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+plotTheme()
ggplot(dat, aes(fill=Species, ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")
ggplot(dat, aes(fill=Species, ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank())
ggplot(dat, aes(fill=Species, ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),axis.text.x = element_blank())
ggplot(dat, aes(fill=Species, ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
panel.background = element_blank())
ggplot(dat, aes(fill=Species, ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
panel.background = element_blank(),plot.title = element_text(hjust=0.4))
ggplot(dat, aes(fill=Species, ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
panel.background = element_blank(),plot.title = element_text(hjust=0.4),
axis.ticks = element_blank())
ggplot(dat, aes(fill=dat[,'Species'], ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
panel.background = element_blank(),plot.title = element_text(hjust=0.4),
axis.ticks = element_blank())
ggplot(dat, aes(fill=dat['Species'], ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
panel.background = element_blank(),plot.title = element_text(hjust=0.4),
axis.ticks = element_blank())
names(dat)
dat[,'Species']
class(dat[,'Species'])
ggplot(dat, aes(fill=as.data.frame(dat['Species']), ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
panel.background = element_blank(),plot.title = element_text(hjust=0.4),
axis.ticks = element_blank())
ggplot(dat, aes(fill=as.data.frame(dat[,'Species']), ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
panel.background = element_blank(),plot.title = element_text(hjust=0.4),
axis.ticks = element_blank())
class(dat[,'Species'])
class(as.data.frame(dat[,'Species']))
ggplot(dat, aes(fill=as.data.frame(dat[,'Species']), ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
panel.background = element_blank(),plot.title = element_text(hjust=0.4),
axis.ticks = element_blank())
ggplot(dat, aes(fill='Species', ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
panel.background = element_blank(),plot.title = element_text(hjust=0.4),
axis.ticks = element_blank())
ggplot(dat, aes(fill=as.name('Species'), ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
panel.background = element_blank(),plot.title = element_text(hjust=0.4),
axis.ticks = element_blank())
ggplot(dat, aes(fill=dat[,'Species'], ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
panel.background = element_blank(),plot.title = element_text(hjust=0.4),
axis.ticks = element_blank())
ggplot(dat, aes_string(fill='Species', ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
panel.background = element_blank(),plot.title = element_text(hjust=0.4),
axis.ticks = element_blank())
ggplot(dat, aes(fill=Species, ymax=ymax, ymin=ymin,xmin=nrow(dat),xmax=nrow(dat)+1)) +
geom_rect() +
coord_polar(theta="y") +
xlim(c(0, 4)) +
labs(title="Basic ring plot")+theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
panel.background = element_blank(),plot.title = element_text(hjust=0.4),
axis.ticks = element_blank())
shiny::runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
?labs
runApp('Documents/R/Data-Summariser')
?selectInput
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
ggplot(iris , aes(x=iris[,'Sepal.Length'],y=iris[,'Sepal.Width'],fill=as.factor(iris[,'Species'])))+geom_point()
ggplot(iris , aes(x=iris[,'Sepal.Length'],y=iris[,'Sepal.Width'],fill=Species))+geom_point()
ggplot(iris , aes(x=Sepal.Length,y=Sepal.Width,fill=Species))+geom_point()
ggplot(iris , aes(x=Sepal.Length,y=Sepal.Width))+geom_point(aes(fill=Species))
runApp('Documents/R/Data-Summariser')
runApp('Documents/R/Data-Summariser')
library(MASS)
write.csv(x=Boston,file='temp_boston.csv')
runApp('Documents/R/Data-Summariser')
read.csv('temp_boston.csv')
getwd()
setwd("/Users/padhokshaja/Documents/R")
setwd("/Users/padhokshaja/Documents/R/Data_Summariser")
setwd("/Users/padhokshaja/Documents/R/Data-Summariser")
write.csv(x=Boston,file='temp_boston.csv')
runApp()
shiny::runApp()
library(plotly)
install.packages('plotly')
library(plotly)
iris
iris %>%
group_by_('Species') %>%
summarise(count=n()) %>%
plot_ly(labels=~'Species')
p <- mtcars %>%
group_by(manuf) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
iris %>%
group_by_('Species') %>%
summarize(count = n()) %>%
plot_ly(labels = ~'Species', values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
iris %>%
group_by_('Species') %>%
summarize(count = n())
iris %>%
group_by_('Species') %>%
summarize(count = n()) %>%
plot_ly(labels = ~as.symbol('Species'), values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
iris %>%
group_by_('Species') %>%
summarize(count = n()) %>%
plot_ly(labels = ~as.name('Species'), values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
iris %>%
group_by_('Species') %>%
summarize(count = n()) %>%
plot_ly(labels = ~Species, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
iris %>%
group_by_('Species') %>%
summarize(count = n()) %>%
rename_('Species'='group') %>%
plot_ly(labels = ~group, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
iris %>%
group_by_('Species') %>%
summarize(count = n()) %>%
rename_('Species'='group')
iris %>%
group_by_('Species') %>%
summarize(count = n()) %>%
rename('Species'='group')
iris %>%
group_by_('Species') %>%
summarize(count = n()) %>%
rename('group'='Species')
iris %>%
group_by_('Species') %>%
summarize(count = n()) %>%
rename('group'='Species') %>%
plot_ly(labels = ~group, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?warning
runApp()
mtcars
runApp()
runApp()
runApp()
runApp()
runApp()
plot_ly()
?plot_ly
runApp()
plot_ly(NULL)
plot_ly(data=NULL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('shinyBS')
source('app.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages('V8')
runApp()
runApp()
shiny::runApp()
runGitHub("Data-Summariser", "adhok")
install.packages('V8')
install.packages("V8")
shiny::runApp()
runApp()
